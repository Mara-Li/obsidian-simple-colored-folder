import {
	normalizePath,
	TFolder,
	type App,
	type PluginManifest,
	type TAbstractFile,
} from "obsidian";
import {
	type Prefix,
	type SimpleColoredFolderSettings,
	STYLE_SPLIT,
	type StyleSettingValue,
} from "./interfaces";
import type SimpleColoredFolder from "./main";
import { convertStyleSettings, convertToCSS, generateName, themes } from "./template";
import { formatCss, removeExtraNewLine } from "./utils";
import dedent from "dedent";
import i18next from "i18next";

export class ColorCompiler {
	plugin: SimpleColoredFolder;
	settings: SimpleColoredFolderSettings;
	style: HTMLStyleElement | null = null;
	app: App;
	snippetPath: string = "generated.colored-folder.css";
	manifest: PluginManifest;
	constructor(plugin: SimpleColoredFolder) {
		this.plugin = plugin;
		this.settings = plugin.settings;
		this.app = plugin.app;
		this.style = plugin.style;
		this.snippetPath = plugin.snippetPath;
		this.manifest = plugin.manifest;
	}

	styleSettingsHeader() {
		return dedent(`
		/* @settings
		name: ${this.manifest.name}
		id: ${this.manifest.id}
		settings:
      -
          id: spf-FolderRadius
          type: variable-number
          title: ${i18next.t("common.radius")}
          description: "Format: px"
          default: 5
          format: px
      -
          id: spf-space-between
          type: variable-number
          default: 0.3
          format: em
          description: "Format: em"
          title: ${i18next.t("common.space")}
      -
          id: spf-saturate
          type: variable-number
          default: 500
          title: ${i18next.t("common.saturate")}
          format: "%"
          description: "Format: %"
      -
          id: spf-saturate-hover
          default: 150
          type: variable-number
          format: "%"
          title: ${i18next.t("common.saturateHover")}
          description: "Format: %"
      -`);
	}

	createStyles(folders: TFolder[], minify?: boolean) {
		let darkTheme = `.theme-dark {`;
		let lightTheme = `.theme-light {`;
		let css = "";
		let stylesSettings = this.styleSettingsHeader();
		for (const folder of folders) {
			const folderName = folder.name;
			const vn = generateName(this.settings.prefix, folderName, "--");
			darkTheme += themes(vn, this.settings.defaultColors, "themeDark");
			lightTheme += themes(vn, this.settings.defaultColors, "themeLight");
			css += convertToCSS(folderName, this.settings.prefix, this.settings.customTemplate);
			stylesSettings += convertStyleSettings(
				folderName,
				this.settings.prefix,
				this.settings.customStyleSettings,
				this.settings.defaultColors
			);
		}
		darkTheme += "}";
		lightTheme += "}";
		stylesSettings = `${stylesSettings.replace(/-+$/, "").trimEnd()}\n*/`;
		return `\n${removeExtraNewLine(stylesSettings)}\n${formatCss(darkTheme, minify)}\n${formatCss(lightTheme, minify)}\n${formatCss(css, minify)}`;
	}

	async injectToBody(content: string) {
		if (await this.app.vault.adapter.exists(this.snippetPath))
			this.app.customCss.setCssEnabledStatus("generated.colored-folder", false);
		this.style = document.createElement("style");
		this.style.id = "simple-colored-folder";
		this.style.setAttribute("type", "text/css");
		this.style.textContent = content;
		document.head.appendChild(this.style);
	}

	async injectToSnippets(content: string) {
		const snippetsDir = normalizePath(`${this.app.vault.configDir}/snippets`);
		if (!(await this.app.vault.adapter.exists(snippetsDir))) {
			//create
			console.warn("Creating snippets directory");
			await this.app.vault.adapter.mkdir(snippetsDir);
		}
		let rules = `/* This file is generated by Simple Colored Folder. Do not edit it manually */`;
		if (this.settings.includeStyleInExport) rules += await this.injectPluginStyles();

		rules += `\n${content}\n`;
		await this.app.vault.adapter.write(this.snippetPath, rules);
		//enable the snippet
		this.app.customCss.setCssEnabledStatus("generated.colored-folder", true);
	}

	private async injectPluginStyles() {
		const pluginDir = normalizePath(
			`${this.app.vault.configDir}/plugins/${this.manifest.id}`
		);
		const stylesPath = normalizePath(`${pluginDir}/styles.css`);
		if (await this.app.vault.adapter.exists(stylesPath)) {
			const styles = (await this.app.vault.adapter.read(stylesPath))
				.split(STYLE_SPLIT)
				.filter((x) => x.length > 0)[0];
			return `\n\n/* ---- */\n${styles}`;
		} else console.error("The plugin folder doesn't exists.");

		return "";
	}

	async injectStyles(reload = true) {
		const folders = this.app.vault
			.getAllFolders()
			.filter(
				(folder: TFolder) => folder.parent && folder.parent === this.app.vault.getRoot()
			);
		this.style?.detach();
		const exportToCSS = this.settings.exportToCSS;
		const style = this.createStyles(folders, !exportToCSS);
		if (exportToCSS) await this.injectToSnippets(style);
		else await this.injectToBody(style);
		if (reload) this.reload();
	}

	async renameCss(newPath: TAbstractFile, oldPath: string) {
		const styleSettingPlugin = this.app.plugins.getPlugin("obsidian-style-settings");
		if (!styleSettingPlugin) return;
		if (newPath instanceof TFolder && newPath.parent === this.app.vault.getRoot()) {
			const settings = (await styleSettingPlugin.loadData()) as Record<
				string,
				StyleSettingValue
			>;
			const oldNames = generateName(this.settings.prefix, oldPath);
			const generateKeys = (prefix: Prefix) => {
				return {
					bg: {
						light: `${this.manifest.id}@@${prefix.bg}@@light`,
						dark: `${this.manifest.id}@@${prefix.bg}@@dark`,
					},
					color: {
						light: `${this.manifest.id}@@${prefix.color}@@light`,
						dark: `${this.manifest.id}@@${prefix.color}@@dark`,
					},
				};
			};

			const oldKeys = generateKeys(oldNames);
			const newKeys = generateKeys(generateName(this.settings.prefix, newPath.name));

			const styleSettingsValues: Record<string, StyleSettingValue | undefined> = {
				[newKeys.bg.light]: settings?.[oldKeys.bg.light],
				[newKeys.bg.dark]: settings?.[oldKeys.bg.dark],
				[newKeys.color.light]: settings?.[oldKeys.color.light],
				[newKeys.color.dark]: settings?.[oldKeys.color.dark],
			};
			//if every key is undefined => no need to re-apply the theming, just return
			if (
				!Object.values(styleSettingsValues).some(
					(value) => value !== undefined && value !== ""
				)
			)
				return this.injectStyles();
			await this.injectStyles();
			//@ts-ignore
			styleSettingPlugin.settingsManager.setSettings(styleSettingsValues);
		} else {
			//remove the old keys with reloading from root
			await this.injectStyles();
		}
	}

	async injectToRoot(file: TAbstractFile) {
		if (file instanceof TFolder && file.parent === this.app.vault.getRoot())
			await this.injectStyles();
	}

	reload() {
		this.app.workspace.trigger("css-change");
	}
}
